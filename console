#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Http\Request;
use Strukt\Core\Registry;
use Strukt\Console;
use Strukt\Router\Kernel as RouterKernel;
use Strukt\Router\Middleware\Router as RouterMiddleware;
use Strukt\Framework\Provider\Router as RouterProvider;
use Strukt\Framework\Provider\Annotation as AnnotationProvider;
use Strukt\Framework\Provider\Validator as ValidatorProvider;
use App\Provider\Logger as LoggerProvider;
use App\Provider\EntityManager as EntityManagerProvider;
use App\Provider\EntityManagerAdapter as EntityManagerAdapterProvider;
use App\Provider\Normalizer as NormalizerProvider;
use App\Loader as AppLoader;
use App\Command\Doctrine\GenerateModels as GenerateModelsCommand;
use App\Command\Doctrine\Migration\GenerateMigration as GenerateMigrationCommand;
use App\Command\Doctrine\Seeder\GenerateSeeder as GenerateSeederCommand;
use App\Command\Doctrine\Migration\MigrateExec as MigrateExecCommand;
use App\Command\Doctrine\Seeder\SeederExec as SeederExecCommand;
use App\Command\Doctrine\SqlExec as SqlExecCommand;

use Cobaia\Doctrine\MonologSQLLogger;

require "bootstrap.php";

Env::set("is_dev", true);
Env::set("root_dir", getcwd());
Env::set("rel_appsrc_dir", "app/src/");
Env::set("rel_db_ini", "cfg/db.ini");
Env::set("rel_app_ini", "cfg/app.ini");
Env::set("rel_mod_ini", "cfg/module.ini");
Env::set("rel_tplapp_dir", "tpl/sgf/app/");
Env::set("rel_tplappsrc_dir", "tpl/sgf/app/src/");
Env::set("rel_tplauthmod_dir","tpl/sgf/app/src/App/AuthModule/");
Env::set("rel_app_lib", "lib/App");
Env::set("rel_loader_sgf","tpl/sgf/lib/App/Loader.sgf");
Env::set("migration_sgf","tpl/sgf/database/schema/Schema/Migration/Version_.sgf");
Env::set("migration_home","database/schema/Schema/Migration");
Env::set("migration_ns", Schema\Migration::class);
Env::set("entity_ns", App\Contract\Entity::class);
Env::set("seeder_sgf", "tpl/sgf/database/seeder/Seed/NameVer.sgf");
Env::set("seeder_dir", "database/seeder/Seed");
Env::set("seeder_home", "database/seeder");
Env::set("logger_name", "Strukt Console Logger");
Env::set("logger_file", "logs/console.log");

$kernel = new RouterKernel(Request::createFromGlobals());
$kernel->inject("app.dep.logger.sqllogger", function(){

	return new MonologSQLLogger(null, null, __DIR__ . '/logs/');
});

$kernel->providers(array(

	ValidatorProvider::class,
	LoggerProvider::class,
	EntityManagerProvider::class,
	EntityManagerAdapterProvider::class,
	RouterProvider::class,
	AnnotationProvider::class,
	NormalizerProvider::class
));

$kernel->middlewares(array(
	
	"router" => new RouterMiddleware,
));

try{
	
	if(!class_exists(AppLoader::class))
		throw new Exception(sprintf("%s does not exist!", AppLoader::class));
	
	$loader = new AppLoader($kernel); 
	$app = $loader->getApp();

	$moduleList = $app->getModuleList();

	$app->initialize();	
}
catch(\Exception $e){

	$moduleList = null;
}

$configs = array(

	"labelStruktSect"=>true, 
	// "loadNativeCmds"=>true,
	"appName"=>"Strukt Console",
	"moduleList"=>$moduleList,
	"appDir"=>"app",
	"rootDir"=>__DIR__
);

$console = new Strukt\Console($configs);
// $console->add(new \App\Command\ShellExec());
$console->addCmdSect("\nDoctrine");
$console->add(new GenerateModelsCommand());
$console->add(new GenerateMigrationCommand());
$console->add(new GenerateSeederCommand());
$console->add(new MigrateExecCommand());
$console->add(new SeederExecCommand());
$console->add(new SqlExecCommand());

exit($console->run($_SERVER["argv"]));