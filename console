#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Http\Request;
use Strukt\Console;
use Strukt\Framework\Configuration;
use Strukt\Router\Kernel;
use Strukt\Framework\App;
use Strukt\Framework\Injectable;
use App\Loader as AppLoader;

require "bootstrap.php";
$settings = require "cfg/settings.php"; 
$inject = require "cfg/injectables.php"; 

Env::set("root_dir", getcwd());

$packages = App::packages("published");

$config = new Configuration($settings, $packages, "console");
foreach($config->get("env") as $key=>$attr)
	Env::set($key, $attr);

$kernel = new Kernel(Request::createFromGlobals());
$inj = new Injectable($packages, $inject["map"], $inject["events"]);
$kconfigs = $inj->getConfigs();

if(!empty($kconfigs))
	foreach($kconfigs as $id=>$kconfig)
		$kernel->inject($inj->getId($id), $kconfig);

$kernel->providers($config->get("providers"));
$kernel->middlewares($config->get("middlewares"));

try{
	
	if(!class_exists(AppLoader::class))
		throw new Exception(sprintf("%s does not exixst!", AppLoader::class));
	
	$loader = new AppLoader($kernel);
	$app = $loader->getApp();

	$moduleList = $app->getModuleList();

	$app->initialize();	
}
catch(\Exception $e){

	$moduleList = null;
}

$console = new Console(array(

	"labelStruktSect"=>true, 
	/** "loadNativeCmds"=>true,**/
	"appName"=>"Strukt Console",
	"moduleList"=>$moduleList,
	"appDir"=>"app",
	"rootDir"=>__DIR__
));

$pkgs = array(

	"pkg_do"=>"Doctrine",
	"pkg_books"=>"Accounts",
	"pkg_roles"=>"RBAC"
);

foreach($config->get("commands") as $pkg=>$cmdset){

	$console->addCmdSect(sprintf("\n%s", $pkgs[$pkg]));
	foreach($cmdset as $cmd)
		$console->add(App::newCls($cmd));
}

exit($console->run($_SERVER["argv"]));